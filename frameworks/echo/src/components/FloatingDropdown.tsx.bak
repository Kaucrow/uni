import React, { useState, useRef, useEffect } from 'react';
import './FloatingDropdown.css';

type DropdownOption = {
  id: string;
  label: string;
  icon?: React.ReactNode;
  onClick?: () => void;
  subOptions?: DropdownOption[];
};

interface FloatingDropdownProps {
  className?: string,
  triggerContent: React.ReactNode;
  options: DropdownOption[];
  position?: 'top-left' | 'top-right' | 'bottom-left' | 'bottom-right';
}

const FloatingDropdown: React.FC<FloatingDropdownProps> = ({
  triggerContent,
  options,
  position = 'bottom-right',
}) => {
  const [isOpen, setIsOpen] = useState(false);
  const [isSticky, setIsSticky] = useState(false);
  const [expandsUp, setExpandsUp] = useState(false);
  const [activeSubmenu, setActiveSubmenu] = useState<string | null>(null);
  const dropdownRef = useRef<HTMLDivElement>(null);
  const triggerRef = useRef<HTMLButtonElement>(null);
  const submenuTimeoutRef = useRef<NodeJS.Timeout | null>(null);

  const getNavbarHeight = (): number => {
    const navbarHeight = getComputedStyle(document.documentElement)
      .getPropertyValue('--navbar-height');
    return parseInt(navbarHeight, 10) || 70;
  };
  
  let navbarHeight = getNavbarHeight();
  const [offset, setOffset] = useState(navbarHeight);

  useEffect(() => {
    const handleScroll = () => {
      if (triggerRef.current) {
        const triggerRect = triggerRef.current.getBoundingClientRect();
        const scrollY = window.scrollY || window.pageYOffset;
        const absoluteTop = triggerRect.top + scrollY;
      
        setIsSticky(scrollY > navbarHeight);
        setOffset(navbarHeight - scrollY);
      }
    };

    window.addEventListener('scroll', handleScroll);
    return () => window.removeEventListener('scroll', handleScroll);
  }, []);

  useEffect(() => {
    if (isOpen && triggerRef.current) {
      const triggerRect = triggerRef.current.getBoundingClientRect();
      const spaceBelow = window.innerHeight - triggerRect.bottom;
      const dropdownHeight = options.length * 48 + 16;
      
      setExpandsUp(spaceBelow < dropdownHeight);
    }
  }, [isOpen, options.length]);

  useEffect(() => {
    const handleClickOutside = (event: MouseEvent) => {
      if (dropdownRef.current && !dropdownRef.current.contains(event.target as Node)) {
        setIsOpen(false);
        setActiveSubmenu(null);
      }
    };

    document.addEventListener('mousedown', handleClickOutside);
    return () => document.removeEventListener('mousedown', handleClickOutside);
  }, []);

  const handleOptionClick = (option: DropdownOption) => {
    if (option.subOptions && option.subOptions.length > 0) {
      setActiveSubmenu(option.id);
    } else if (option.onClick) {
      option.onClick();
      setIsOpen(false);
      setActiveSubmenu(null);
    }
  };

  const handleSubmenuOptionClick = (option: DropdownOption) => {
    if (option.onClick) {
      option.onClick();
      setIsOpen(false);
      setActiveSubmenu(null);
    }
  };

  const handleOptionMouseEnter = (optionId: string) => {
    if (submenuTimeoutRef.current) {
      clearTimeout(submenuTimeoutRef.current);
    }
    setActiveSubmenu(optionId);
  };

  const handleOptionMouseLeave = () => {
    submenuTimeoutRef.current = setTimeout(() => {
      setActiveSubmenu(null);
    }, 300);
  };

  const getSubmenu = (optionId: string) => {
    const option = options.find(opt => opt.id === optionId);
    if (!option || !option.subOptions) return null;

    return (
      <div 
        className="submenu"
        onMouseEnter={() => handleOptionMouseEnter(optionId)}
        onMouseLeave={handleOptionMouseLeave}
      >
        {option.subOptions.map((subOption) => (
          <button
            key={subOption.id}
            className="dropdown-item"
            onClick={() => handleSubmenuOptionClick(subOption)}
          >
            {subOption.icon && <span className="item-icon">{subOption.icon}</span>}
            {subOption.label}
          </button>
        ))}
      </div>
    );
  };
  return (
    <div className={`floating-dropdown ${position}`} ref={dropdownRef}>
      <button 
        ref={triggerRef}
        className="dropdown-trigger"
        onClick={() => {
          setIsOpen(!isOpen);
          setActiveSubmenu(null);
        }}
      >
        {triggerContent}
      </button>

      {isOpen && (
        <div className={`dropdown-menu ${expandsUp ? 'expands-up' : 'expands-down'}`}>
          {options.map((option) => (
            <div 
              key={option.id}
              className="dropdown-item-container"
              onMouseEnter={() => option.subOptions && setActiveSubmenu(option.id)}
              onMouseLeave={() => setActiveSubmenu(null)}
            >
              <button
                className={`dropdown-item ${activeSubmenu === option.id ? 'active' : ''}`}
                onClick={() => handleOptionClick(option)}
              >
                {option.icon && <span className="item-icon">{option.icon}</span>}
                {option.label}
                {option.subOptions && <span className="submenu-arrow">â€º</span>}
              </button>
              {activeSubmenu === option.id && (
                <div className="submenu">
                  {option.subOptions?.map((subOption) => (
                    <button
                      key={subOption.id}
                      className="dropdown-item"
                      onClick={() => handleSubmenuOptionClick(subOption)}
                    >
                      {subOption.icon && <span className="item-icon">{subOption.icon}</span>}
                      {subOption.label}
                    </button>
                  ))}
                </div>
              )}
            </div>
          ))}
        </div>
      )}
    </div>
  );
};

export default FloatingDropdown;